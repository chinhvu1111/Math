package E1_daily;

import java.util.*;

public class E82_NumberOfWaysToArriveAtDestination {

    public static int countPathsTLE(int n, int[][] roads) {
        int mod=1_000_000_007;
        Map<Integer, List<int[]>> graph= new HashMap<>();

        for(int[] r: roads){
            List<int[]> adj=graph.getOrDefault(r[0], new ArrayList<>());
            adj.add(new int[]{r[1], r[2]});
            graph.put(r[0], adj);
            List<int[]> adj1=graph.getOrDefault(r[1], new ArrayList<>());
            adj1.add(new int[]{r[0], r[2]});
            graph.put(r[1], adj1);
        }
        PriorityQueue<long[]> heap=new PriorityQueue<>(new Comparator<long[]>() {
            @Override
            public int compare(long[] o1, long[] o2) {
                return (int) (o1[1]-o2[1]);
            }
        });
        //<node, depth>
        heap.add(new long[]{0L, 0L});
        Map<Long, Integer> rsCount=new HashMap<>();
//        boolean[][] visited=new boolean[n][n];
//        visited[0]=true;
        long curRs=Long.MAX_VALUE;
        long[] maxDepth=new long[n];
        Arrays.fill(maxDepth, Long.MAX_VALUE);
        maxDepth[0]=0;

        while(!heap.isEmpty()){
            long[] curNode=heap.poll();
            if(curNode[0]==n-1&&curNode[1]<curRs){
                curRs=curNode[1];
//                rsCount.clear();
                rsCount.put(curRs, rsCount.getOrDefault(curRs, 0)+1);
            }else if(curNode[0]==n-1&&curNode[1]==curRs){
                rsCount.put(curRs, rsCount.getOrDefault(curRs, 0)+1);
            }
            if(curNode[0] == (n - 1)){
                continue;
            }
            List<int[]> adj=graph.get((int)curNode[0]);

            //- Nếu mark visited ==> Sẽ bị thiếu:
            //  + Vì để đến n-1:
            //      + Chỉ có 1 số điểm đến được
            //      ==> Nếu chúng đã mark thì không thể đến n-1 được nữa
            //- Mark visited theo (node/ edge):
            //  + Đều không được ==> Nó cần đi lại cạnh cũ
            //- Ta cần làm sao để traverse không có cycle
            //  + Mỗi node cần được lưu visited
            //  ==> Dùng bit để lưu vết 1<<200 khá lớn
            //- Dùng union find ==> Tìm cycle là được
            //  + Luôn luôn lưu gốc ==> Nếu quay lại điểm có dấu hiệu parent của nó là root
            //      + Không đến nữa.
            for(int[] nextNode: adj){
                if(nextNode[0] == curNode[0]){
                    continue;
                }
                if(curRs<(curNode[1]+nextNode[1])%mod){
                    continue;
                }
                if(maxDepth[nextNode[0]]<(curNode[1]+nextNode[1])%mod){
                    continue;
                }
                maxDepth[nextNode[0]] = (curNode[1]+nextNode[1])%mod;
                heap.add(new long[]{nextNode[0], (curNode[1]+nextNode[1])%mod});
            }
        }
//        System.out.println(rsCount);
        return rsCount.get(curRs);
    }

    public static int countPaths(int n, int[][] roads) {
        int mod=1_000_000_007;
        Map<Integer, List<int[]>> graph= new HashMap<>();

        //Time: O(E)
        for(int[] r: roads){
            List<int[]> adj=graph.getOrDefault(r[0], new ArrayList<>());
            adj.add(new int[]{r[1], r[2]});
            graph.put(r[0], adj);
            List<int[]> adj1=graph.getOrDefault(r[1], new ArrayList<>());
            adj1.add(new int[]{r[0], r[2]});
            graph.put(r[1], adj1);
        }
        PriorityQueue<long[]> heap=new PriorityQueue<>(new Comparator<long[]>() {
            @Override
            public int compare(long[] o1, long[] o2) {
                return (int) (o1[1]-o2[1]);
            }
        });
        //<node, depth>
        heap.add(new long[]{0L, 0L, 1L});
        Map<Long, Long> rsCount=new HashMap<>();
        boolean[] visited=new boolean[n];
//        visited[0]=true;
        long curRs=Long.MAX_VALUE;
        long[] maxDepth=new long[n];
        Arrays.fill(maxDepth, Long.MAX_VALUE);
        maxDepth[0]=0;

        while(!heap.isEmpty()){
            long[] curNode=heap.poll();
            while (!heap.isEmpty()&&curNode[0]==heap.peek()[0]){
                long[] nextNode = heap.poll();
                if(curNode[1]==nextNode[1]){
                    curNode[2]=(curNode[2]+nextNode[2])%mod;
                }
            }
            if(curNode[0]==n-1&&curNode[1]<curRs){
                curRs=curNode[1];
//                rsCount.clear();
                rsCount.put(curRs, (rsCount.getOrDefault(curRs, 0L)+curNode[2])%mod);
            }else if(curNode[0]==n-1&&curNode[1]==curRs){
                rsCount.put(curRs, (rsCount.getOrDefault(curRs, 0L)+curNode[2])%mod);
            }
            if(curNode[0] == (n - 1)){
                continue;
            }
            visited[(int) curNode[0]]=true;
//            visited[(int) curNode[0]]=true;
            List<int[]> adj=graph.get((int)curNode[0]);

            //- Nếu mark visited ==> Sẽ bị thiếu:
            //  + Vì để đến n-1:
            //      + Chỉ có 1 số điểm đến được
            //      ==> Nếu chúng đã mark thì không thể đến n-1 được nữa
            //- Mark visited theo (node/ edge):
            //  + Đều không được ==> Nó cần đi lại cạnh cũ
            //- Ta cần làm sao để traverse không có cycle
            //  + Mỗi node cần được lưu visited
            //  ==> Dùng bit để lưu vết 1<<200 khá lớn
            //- Dùng union find ==> Tìm cycle là được
            //  + Luôn luôn lưu gốc ==> Nếu quay lại điểm có dấu hiệu parent của nó là root
            //      + Không đến nữa.
            //Time: O(E)
            for(int[] nextNode: adj){
                if(visited[nextNode[0]]){
                    continue;
                }
                if(curRs<(curNode[1]+nextNode[1])%mod){
                    continue;
                }
                if(maxDepth[nextNode[0]]<(curNode[1]+nextNode[1])%mod){
                    continue;
                }
                maxDepth[nextNode[0]] = (curNode[1]+nextNode[1])%mod;
                //Time: O(log(E))
                heap.add(new long[]{nextNode[0], (curNode[1]+nextNode[1]), curNode[2]});
//                visited[nextNode[0]]=true;
            }
        }
//        System.out.println(rsCount);
        return Math.toIntExact(rsCount.get(curRs)%mod);
    }

    public static void main(String[] args) {
        //** Requirement
        //- You are in a city that consists of (n intersections) numbered from (0 to n - 1) with (bi-directional roads) between (some intersections).
        //- The inputs are generated such that you can reach (any intersection) from any (other intersection) and
        // that there is (at most one road) between any (two intersections).
        //- You are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means
        // that there is (a road) between intersections (ui and vi) that takes (timei minutes) to travel.
        //- You want to know in (how many ways) you can travel from intersection (0 to intersection n - 1) in (the shortest amount of time).
        //* Return (the number of ways) you can arrive at (your destination) in (the shortest amount of time).
        //+ Since the answer may be large, return it modulo 10^9 + 7.
        //
        // Idea
        //1.
        //1.0,
        // Method-1:
        //- Constraint
        //1 <= n <= 200
        //n - 1 <= roads.length <= n * (n - 1) / 2
        //roads[i].length == 3
        //0 <= ui, vi <= n - 1
        //1 <= timei <= 10^9
        //ui != vi
        //There is (at most one road) connecting any (two intersections).
        //You can reach any intersection from any other intersection.
        //  + Time khá lớn (10^9) ==> Cần phải dùng (Long type)
        //
        //- Brainstorm
        //- Ở đây có cần tìm min times giữa 2 nodes
        //- Cũng cần phải count số lượng road nữa
        //- Bài này có thể dùng dijikstra:
        //  + Priority queue
        //
//        int n = 7;
//        int[][] roads = {{0,6,7},{0,1,2},{1,2,3},{1,3,3},{6,3,3},{3,5,1},{6,5,1},{2,5,1},{0,4,5},{4,6,2}};
//        int n = 34;
//        int[][] roads = {{1,0,9611},{0,2,13741},{2,1,4130},{2,3,2339},{3,0,16080},{1,4,9725},{0,4,19336},{3,4,3256},{4,2,5595},
//                {5,4,6224},{6,2,1303},{1,6,5433},{7,6,10824},{4,7,6532},{5,7,308},{7,1,16257},{6,8,14961},{8,4,10669},{8,0,30005},
//                {5,8,4445},{8,3,13925},{8,7,4137},{2,8,16264},{9,4,12915},{0,9,32251},{8,9,2246},{10,7,14204},{0,10,40072},{6,10,25028},
//                {10,8,10067},{10,3,23992},{10,2,26331},{10,1,30461},{4,10,20736},{5,10,14512},{9,10,7821},{11,4,3381},{12,4,27123},
//                {9,12,14208},{10,12,6387},{8,12,16454},{12,0,46459},{7,12,20591},{12,5,20899},{2,12,32718},{12,11,23742},{1,12,36848},
//                {6,12,31415},{5,13,25075},{13,10,10563},{3,13,34555},{13,12,4176},{13,8,20630},{13,1,41024},{13,11,27918},{13,7,24767},
//                {4,13,31299},{2,13,36894},{10,14,8784},{12,14,2397},{4,14,29520},{6,14,33812},{9,14,16605},{14,3,32776},{5,14,23296},
//                {14,2,35115},{8,14,18851},{7,14,22988},{10,15,9236},{15,3,33228},{15,0,49308},{15,12,2849},{4,16,41221},{16,8,30552},
//                {10,16,20485},{16,11,37840},{16,6,45513},{16,14,11701},{3,16,44477},{1,16,50946},{16,5,34997},{16,7,34689},{12,16,14098},
//                {16,0,60557},{16,13,9922},{2,16,46816},{16,9,28306},{17,9,36735},{17,3,52906},{16,17,8429},{8,17,38981},{7,17,43118},
//                {6,17,53942},{4,17,49650},{17,14,20130},{17,13,18351},{17,10,28914},{17,11,46269},{1,17,59375},{15,17,19678},{17,12,22527},
//                {15,18,27895},{18,12,30744},{18,11,54486},{18,4,57867},{3,18,61123},{18,16,16646},{13,18,26568},{18,8,47198},{1,18,67592},
//                {17,18,8217},{0,18,77203},{6,18,62159},{18,14,28347},{19,13,32225},{11,19,60143},{5,19,57300},{19,15,33552},{10,19,42788},
//                {6,19,67816},{7,19,56992},{19,18,5657},{19,1,73249},{16,19,22303},{8,19,52855},{17,19,13874},{19,3,66780},{19,9,50609},
//                {19,0,82860},{19,4,63524},{4,20,69122},{18,20,11255},{3,20,72378},{11,20,65741},{14,20,39602},{10,20,48386},{1,20,78847},
//                {20,5,62898},{20,15,39150},{20,19,5598},{16,20,27901},{12,20,41999},{0,20,88458},{8,20,58453},{20,13,37823},{20,7,62590},
//                {9,20,56207},{2,20,74717},{20,17,19472},{17,21,26673},{16,21,35102},{3,21,79579},{21,18,18456},{21,9,63408},{21,20,7201},
//                {2,21,81918},{21,11,72942},{14,22,50771},{22,19,16767},{22,18,22424},{22,15,50319},{22,13,48992},{22,3,83547},{6,22,84583},
//                {22,5,74067},{22,10,59555},{16,22,39070},{22,20,11169},{22,12,53168},{4,22,80291},{22,2,85886},{22,8,69622},{22,21,3968},
//                {22,17,30641},{0,22,99627},{11,22,76910},{22,7,73759},{2,23,87059},{23,6,85756},{5,23,75240},{23,21,5141},{9,23,68549},
//                {14,23,51944},{20,23,12342},{1,23,91189},{8,23,70795},{11,23,78083},{23,13,50165},{23,22,1173},{12,23,54341},{23,3,84720},
//                {23,10,60728},{23,17,31814},{21,24,5622},{14,24,52425},{24,20,12823},{7,24,75413},{24,2,87540},{25,1,101404},{13,25,60380},
//                {25,7,85147},{9,25,78764},{15,25,61707},{19,25,28155},{25,22,11388},{25,17,42029},{25,5,85455},{16,25,50458},{25,4,91679},
//                {25,23,10215},{25,14,62159},{24,25,9734},{25,21,15356},{25,10,70943},{25,20,22557},{3,25,94935},{0,25,111015},{19,26,31787},
//                {14,26,65791},{26,3,98567},{26,15,65339},{26,25,3632},{24,26,13366},{9,26,82396},{18,26,37444},{26,17,45661},{26,1,105036},
//                {22,26,15020},{26,5,89087},{10,26,74575},{26,2,100906},{11,26,91930},{13,26,64012},{26,12,68188},{26,4,95311},{20,26,26189},
//                {0,26,114647},{26,21,18988},{0,27,100248},{21,27,4589},{2,27,86507},{4,27,80912},{27,9,67997},{14,27,51392},{27,15,50940},
//                {27,10,60176},{27,11,77531},{27,13,49613},{0,28,124384},{28,12,77925},{28,27,24136},{28,26,9737},{28,10,84312},{28,13,73749},
//                {28,16,63827},{20,28,35926},{28,23,23584},{29,6,100376},{29,23,14620},{29,17,46434},{29,25,4405},{22,29,15793},{29,15,66112},
//                {5,29,89860},{0,29,115420},{13,29,64785},{29,4,96084},{29,19,32560},{29,21,19761},{29,26,773},{11,29,92703},{9,29,83169},
//                {29,18,38217},{29,10,75348},{7,29,89552},{1,29,105809},{29,20,26962},{29,16,54863},{12,29,68961},{29,2,101679},{29,24,14139},
//                {4,30,111360},{10,30,90624},{30,5,105136},{30,1,121085},{8,30,100691},{28,30,6312},{27,30,30448},{30,24,29415},{30,26,16049},
//                {30,12,84237},{6,30,115652},{30,2,116955},{30,14,81840},{30,20,42238},{30,29,15276},{30,9,98445},{30,3,114616},{30,16,70139},
//                {21,30,35037},{30,25,19681},{30,13,80061},{18,30,53493},{30,11,107979},{30,15,81388},{30,0,130696},{31,16,58739},{31,29,3876},
//                {6,31,104252},{31,2,105555},{31,15,69988},{1,32,117525},{20,32,38678},{7,32,101268},{27,32,26888},{25,32,16121},{29,32,11716},
//                {23,32,26336},{32,14,78280},{31,32,7840},{15,32,77828},{32,5,101576},{11,32,104419},{12,32,80677},{23,33,30143},{18,33,53740},
//                {33,10,90871},{31,33,11647},{33,21,35284},{33,25,19928},{33,32,3807},{33,26,16296}};
        int n = 47;
        int[][] roads = {{1,0,3233},{1,2,5575},{2,0,8808},{3,1,3576},{0,3,6809},{4,2,8393},{0,4,17201},{5,2,9453},{5,0,18261},{5,4,1060},{5,3,11452},{6,3,20051},{6,2,18052},{5,6,8599},{6,0,26860},{4,6,9659},{1,6,23627},{3,7,3440},{8,4,10812},{2,8,19205},{5,8,9752},{1,8,24780},{8,7,17764},{6,8,1153},{8,3,21204},{8,0,28013},{9,6,5862},{7,9,22473},{9,2,23914},{9,4,15521},{9,8,4709},{1,9,29489},{5,9,14461},{0,9,32722},{9,3,25913},{10,3,4235},{10,2,2236},{0,10,11044},{11,10,23371},{1,11,31182},{11,3,27606},{6,11,7555},{11,9,1693},{2,11,25607},{8,11,6402},{11,0,34415},{11,4,17214},{7,11,24166},{5,11,16154},{6,12,15767},{12,9,9905},{4,12,25426},{0,12,42627},{12,5,24366},{12,3,35818},{12,8,14614},{12,10,31583},{12,11,8212},{7,12,32378},{12,1,39394},{2,12,33819},{2,13,40532},{8,13,21327},{13,1,46107},{13,12,6713},{3,13,42531},{11,13,14925},{14,8,3362},{1,14,28142},{15,14,6053},{8,16,28951},{16,10,45920},{14,16,25589},{5,16,38703},{16,2,48156},{13,16,7624},{16,15,19536},{16,6,30104},{16,1,53731},{16,3,50155},{9,16,24242},{16,4,39763},{12,16,14337},{14,17,19219},{0,17,50594},{7,17,40345},{17,12,7967},{17,5,32333},{17,9,17872},{1,17,47361},{13,17,1254},{18,17,6103},{18,1,53464},{18,12,14070},{18,8,28684},{11,18,22282},{18,6,29837},{18,7,46448},{10,18,45653},{4,18,39496},{18,9,23975},{3,18,49888},{18,15,19269},{19,16,1549},{19,12,15886},{19,13,9173},{7,19,48264},{19,2,49705},{19,11,24098},{3,19,51704},{4,19,41312},{19,1,55280},{9,19,25791},{15,19,21085},{19,0,58513},{17,19,7919},{9,20,25990},{12,20,16085},{15,20,21284},{0,20,58712},{1,20,55479},{11,20,24297},{4,20,41511},{20,14,27337},{20,2,49904},{20,10,47668},{20,17,8118},{20,3,51903},{16,20,1748},{8,20,30699},{20,13,9372},{5,20,40451},{19,20,199},{20,18,2015},{21,9,10192},{21,5,24653},{3,21,36105},{21,12,287},{4,21,25713},{22,19,801},{21,22,16400},{13,22,9974},{22,1,56081},{22,0,59314},{3,22,52505},{22,20,602},{22,14,27939},{9,22,26592},{4,22,42113},{22,10,48270},{22,7,49065},{22,15,21886},{22,2,50506},{18,22,2617},{11,22,24899},{22,12,16687},{22,17,8720},{22,6,32454},{16,22,2350},{22,23,2765},{11,23,27664},{23,17,11485},{23,20,3367},{3,23,55270},{23,1,58846},{12,23,19452},{23,13,12739},{23,4,44878},{0,23,62079},{6,23,35219},{19,23,3566},{23,8,34066},{23,18,5382},{5,23,43818},{23,9,29357},{10,23,51035},{2,23,53271},{23,21,19165},{23,15,24651},{23,14,30704},{7,23,51830},{24,22,12265},{10,24,60535},{24,4,54378},{24,5,53318},{3,24,64770},{0,24,71579},{24,11,37164},{6,24,44719},{14,24,40204},{1,24,68346},{20,24,12867},{7,24,61330},{24,19,13066},{24,23,9500},{13,24,22239},{17,24,20985},{24,9,38857},{11,25,28058},{14,25,31098},{9,25,29751},{25,12,19846},{4,25,45272},{25,23,394},{25,5,44212},{8,25,34460},{25,2,53665},{25,17,11879},{25,16,5509},{10,25,51429},{15,26,37981},{26,21,32495},{26,23,13330},{24,26,3830},{4,26,58208},{0,26,75409},{10,26,64365},{26,3,68600},{26,11,40994},{26,2,66601},{6,26,48549},{13,26,26069},{0,27,82747},{7,27,72498},{27,2,73939},{27,26,7338},{27,15,45319},{27,23,20668},{21,27,39833},{3,27,75938},{27,16,25783},{9,27,50025},{27,1,79514},{27,20,24035},{10,27,71703},{27,6,55887},{5,27,64486},{25,27,20274},{18,27,26050},{27,8,54734},{27,4,65546},{27,12,40120},{24,28,7405},{28,12,36357},{28,0,78984},{28,10,67940},{14,28,47609},{7,28,68735},{8,29,54915},{29,26,7519},{15,29,45500},{29,4,65727},{2,29,74120},{29,5,64667},{1,29,79695},{25,29,20455},{0,29,82928},{21,29,40014},{3,29,76119},{29,23,20849},{12,29,40301},{28,29,3944},{29,17,32334},{19,29,24415},{14,29,51553},{22,29,23614},{29,10,71884},{29,11,48513},{29,24,11349},{29,7,72679},{29,27,181},{29,6,56068},{29,20,24216},{29,16,25964},{30,8,58234},{30,22,26933},{27,30,3500},{4,30,69046},{30,9,53525},{30,3,79438},{30,10,75203},{30,29,3319},{28,30,7263},{14,30,54872},{30,20,27535},{30,25,23774},{30,2,77439},{30,23,24168},{30,5,67986},{21,30,43333},{30,16,29283},{0,30,86247},{15,30,48819},{30,19,27734},{30,13,36907},{7,30,75998},{30,12,43620},{1,30,83014},{30,24,14668},{18,30,29550},{9,31,59524},{31,20,33534},{31,10,81202},{31,25,29773},{1,31,89013},{31,24,20667},{30,31,5999},{18,31,35549},{31,13,42906},{2,31,83438},{31,29,9318},{31,26,16837},{22,31,32932},{4,31,75045},{31,7,81997},{14,31,60871},{31,8,64233},{11,31,57831},{31,23,30167},{31,27,9499},{29,32,11204},{15,32,56704},{25,32,31659},{32,4,76931},{17,32,43538},{13,32,44792},{32,12,51505},{32,27,11385},{21,32,51218},{32,22,34818},{32,30,7885},{33,6,58334},{33,0,85194},{22,33,25880},{33,7,74945},{33,9,52472},{33,24,13615},{33,26,9785},{33,19,26681},{33,8,57181},{34,13,46224},{34,15,58136},{34,1,92331},{8,34,67551},{34,17,44970},{34,25,33091},{34,32,1432},{5,34,77303},{4,34,78363},{20,34,36852},{34,31,3318},{34,19,37051},{34,0,95564},{34,2,86756},{34,23,33485},{27,34,12817},{34,9,62842},{34,18,38867},{34,33,10370},{34,24,23985},{34,10,84520},{6,34,68704},{34,7,85315},{28,34,16580},{34,29,12636},{14,34,64189},{3,34,88755},{34,30,9317},{34,21,52650},{34,16,38600},{11,34,61149},{35,29,20510},{22,35,44124},{19,35,44925},{17,35,52844},{35,5,85177},{13,35,54098},{35,2,94630},{21,35,60524},{4,35,86237},{35,10,92394},{9,35,70716},{35,20,44726},{12,35,60811},{14,35,72063},{35,26,28029},{35,8,75425},{35,28,24454},{35,16,46474},{35,3,96629},{35,34,7874},{35,0,103438},{35,15,66010},{35,6,76578},{24,35,31859},{25,35,40965},{35,27,20691},{3,36,106449},{5,36,94997},{11,36,78843},{36,29,30330},{26,36,37849},{36,9,80536},{12,36,70631},{0,36,113258},{34,36,17694},{36,21,70344},{31,36,21012},{36,10,102214},{6,36,86398},{36,4,96057},{36,24,41679},{36,30,27011},{1,36,110025},{36,35,9820},{36,16,56294},{17,36,62664},{8,36,85245},{36,15,75830},{36,28,34274},{13,36,63918},{36,18,56561},{36,14,81883},{37,34,25794},{20,37,62646},{12,37,78731},{7,37,111109},{8,37,93345},{2,37,112550},{4,37,104157},{27,37,38611},{37,22,62044},{28,37,42374},{35,37,17920},{37,5,103097},{23,37,59279},{37,19,62845},{37,10,110314},{37,36,8100},{37,17,70764},{37,6,94498},{37,26,45949},{37,11,86943},{37,31,29112},{33,37,36164},{37,32,27226},{37,25,58885},{29,37,38430},{3,37,114549},{37,18,64661},{37,15,83930},{37,38,2541},{10,38,112855},{39,22,72121},{39,18,74738},{39,19,72922},{7,39,121186},{39,23,69356},{39,26,56026},{39,34,35871},{35,39,27997},{36,39,18177},{1,39,128202},{15,39,94007},{21,39,88521},{38,39,7536},{39,33,46241},{6,39,104575},{31,39,39189},{39,9,98713},{20,39,72723},{27,39,48688},{29,39,48507},{16,39,74471},{11,39,97020},{24,39,59856},{39,8,103422},{39,14,100060},{39,10,120391},{39,5,113174},{39,32,37303},{39,2,122627},{25,39,68962},{39,13,82095},{3,39,124626},{2,40,129296},{36,40,24846},{24,40,66525},{40,18,81407},{40,13,88764},{25,40,75631},{40,29,55176},{40,17,87510},{40,21,95190},{9,40,105382},{40,6,111244},{34,40,42540},{26,40,62695},{19,40,79591},{39,40,6669},{40,33,52910},{40,27,55357},{29,41,49530},{41,39,1023},{7,41,122209},{41,20,73746},{26,41,57049},{25,41,69985},{41,13,83118},{19,41,73945},{32,41,38326},{31,41,40212},{11,41,98043},{41,35,29020},{41,14,101083},{41,2,123650},{41,0,132458},{41,5,114197},{18,41,75761},{41,6,105598},{38,41,8559},{41,21,89544},{41,3,125649},{41,33,47264},{28,41,53474},{41,12,89831},{41,24,60879},{15,41,95030},{36,41,19200},{41,1,129225},{42,14,110641},{16,42,85052},{42,4,124815},{42,13,92676},{42,18,85319},{40,42,3912},{42,30,55769},{42,34,46452},{39,42,10581},{42,2,133208},{15,42,104588},{42,33,56822},{37,42,20658},{20,42,83304},{42,11,107601},{3,42,135207},{25,42,79543},{42,32,47884},{42,29,59088},{36,42,28758},{31,42,49770},{42,1,138783},{42,23,79937},{28,42,63032},{12,42,99389},{42,21,99102},{42,38,18117},{42,22,82702},{0,42,142016},{27,42,59269},{42,17,91422},{42,35,38578},{42,8,114003},{42,7,131767},{42,5,123755},{43,42,9318},{30,43,65087},{41,43,18876},{43,20,92622},{40,43,13230},{14,43,119959},{43,29,68406},{25,43,88861},{34,43,55770},{43,27,68587},{37,43,29976},{31,44,64955},{42,44,15185},{27,44,74454},{17,44,106607},{44,40,19097},{6,44,130341},{44,35,53763},{44,22,97887},{44,21,114287},{44,33,72007},{36,44,43943},{3,44,150392},{44,0,157201},{44,5,138940},{12,44,114574},{44,23,95122},{10,44,146157},{18,44,100504},{44,2,148393},{16,44,100237},{11,44,122786},{43,44,5867},{44,41,24743},{44,26,81792},{30,44,70954},{24,44,85622},{44,37,35843},{9,44,124479},{44,20,98489},{44,1,153968},{44,34,61637},{44,39,25766},{44,19,98688},{7,44,146952},{44,28,78217},{25,44,94728},{44,13,107861},{15,44,119773},{32,44,63069},{29,44,74273},{14,44,125826},{44,8,129188},{44,45,2211},{45,17,108818},{45,38,35513},{45,8,131399},{30,45,73165},{45,34,63848},{45,2,150604},{45,5,141151},{28,45,80428},{45,37,38054},{1,45,156179},{35,45,55974},{45,24,87833},{29,45,76484},{45,14,128037},{45,20,100700},{3,45,152603},{45,31,67166},{45,10,148368},{45,36,46154},{43,45,8078},{11,45,124997},{16,45,102448},{25,45,96939},{45,40,21308},{32,45,65280},{45,15,121984},{7,45,149163},{26,45,84003},{45,13,110072},{0,45,159412},{6,45,132552},{45,33,74218},{46,20,103665},{33,46,77183},{46,16,105413},{38,46,38478},{19,46,103864},{46,17,111783},{46,2,153569},{41,46,29919},{46,9,129655},{46,39,30942},{40,46,24273},{26,46,86968},{46,11,127962},{30,46,76130},{44,46,5176},{10,46,151333},{46,34,66813},{46,6,135517},{46,18,105680},{1,46,159144},{25,46,99904},{46,43,11043},{29,46,79449},{46,8,134364},{42,46,20361}};
        //
        //** KINH NGHIỆM:
        //- Tính chất của dijikstra algorithm:
        //- Nếu mark visited ==> Sẽ bị thiếu:
        //  + Vì để đến n-1:
        //      + Chỉ có 1 số điểm đến được
        //      ==> Nếu chúng đã mark thì không thể đến n-1 được nữa
        //- Mark visited theo (node/ edge):
        //  + Đều không được ==> Nó cần đi lại cạnh cũ
        //- Ta cần làm sao để traverse không có cycle
        //  + Mỗi node cần được lưu visited
        //* Bit manipulation???
        //  + Overflow ngay
        //  ==> Dùng bit để lưu vết 1<<200 khá lớn
        //- Dùng union find ==> Tìm cycle là được
        //  + Luôn luôn lưu gốc ==> Nếu quay lại điểm có dấu hiệu parent của nó là root
        //      + ===> KHÔNG ĐƯỢC vì điểm đó có thể connect với 1 node khác ==> Nó sẽ back ra cycle
        //
        //** KINH NGHIỆM DIJIKSTRA:
        //- Cache length trên từng Node ==> Cũng có thể cut cycle
        //  + Vì nếu đi xa thêm ==> Back lại (old node)
        //      + Chắc chắn node đó sẽ có weight lớn hơn ==> Có cycle
        //  * Solution:
        //      + Tạo depth array lưu lại weight đến từng node (0 --> N-1)
        //- Để không xảy ra việc cùng 1 node cho cũng 1 weight:
        //  + Ta add (K>1) lần cùng 1 nodes vào heap:
        //      + Lúc đó nó sẽ đi ra multiple paths ==> Rất nhiều (recursion paths)
        //  ==> Node đó ta chỉ lấy 1 lần ==> pop min các node ở đầu heap mà (Có cùng node value)
        //  ** MAIN POINT:
        //  - Nếu tìm được 1 node có thể đi đến 2 lần (Ở trong heap cạnh nhau liên tiếp):
        //      + Ta cộng dồn số lần xuất hiện của nó bằng (new dimension):
        //          ==> Pop liên tiếp đến khi không tìm được node giống nó nữa
        //  Ex:
        //          3(1)  4(1)
        //           \    /
        //      1(1)  2 (2)
        //        \   /
        //          5 (3)
        //  - Số lần có thể đến 5 = số lần có thể đến ( (1) + (2) )
        //
        //- Issues:
        //- TLE vì:
        //  + Cycle
        //  + Đi lại điểm có cùng weight
        //      + 1 điểm nhưng để đến nó ==> Cho cùng weight
        //  + Không dùng visited
        //- Overflow:
        //  + Không mod cả (count) và (sum)
        //
        //1.1, Optimization
        //1.2, Complexity
        //- Space: O(V+E+log(V))
        //- Time: O(E*log(E) + E)
        //Cycle
//        System.out.println(countPathsTLE(n, roads));
        System.out.println(countPaths(n, roads));
//        System.out.println(1L<< 36);
        //#Reference:
        //3154. Find Number of Ways to Reach the K-th Stair
        //2699. Modify Graph Edge Weights
        //466. Count The Repetitions
        //
        //743. Network Delay Time
        //2290. Minimum Obstacle Removal to Reach Corner
        //787. Cheapest Flights Within K Stops
        //1514. Path with Maximum Probability
        //2045. Second Minimum Time to Reach Destination
        //1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance
        //1631. Path With Minimum Effort
        //778. Swim in Rising Water
    }
}
