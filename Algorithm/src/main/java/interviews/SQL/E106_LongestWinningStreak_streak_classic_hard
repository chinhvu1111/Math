** Requirement:
Table: Matches

+-------------+------+
| Column Name | Type |
+-------------+------+
| player_id   | int  |
| match_day   | date |
| result      | enum |
+-------------+------+
(player_id, match_day) is the primary key (combination of columns with unique values) for this table.
Each row of this table contains (the ID of a player), (the day of the match they played), and (the result of that match).
The result column is an ENUM (category) type of ('Win', 'Draw', 'Lose').

- (The winning streak) of a player is (the number of consecutive wins) (uninterrupted by draws or losses).
* Write a solution to count (the longest winning streak) for (each player).
- Return the result table in any order.
The result format is in the following example.

Example 1:

Input:
Matches table:
+-----------+------------+--------+
| player_id | match_day  | result |
+-----------+------------+--------+
| 1         | 2022-01-17 | Win    |
| 1         | 2022-01-18 | Win    |
| 1         | 2022-01-25 | Win    |
| 1         | 2022-01-31 | Draw   |
| 1         | 2022-02-08 | Win    |
| 2         | 2022-02-06 | Lose   |
| 2         | 2022-02-08 | Lose   |
| 3         | 2022-03-30 | Win    |
+-----------+------------+--------+
Output:
+-----------+----------------+
| player_id | longest_streak |
+-----------+----------------+
| 1         | 3              |
| 2         | 0              |
| 3         | 1              |
+-----------+----------------+
Explanation:
Player 1:
From 2022-01-17 to 2022-01-25, player 1 won 3 consecutive matches.
On 2022-01-31, player 1 had a draw.
On 2022-02-08, player 1 won a match.
The longest winning streak was 3 matches.

Player 2:
From 2022-02-06 to 2022-02-08, player 2 lost 2 consecutive matches.
The longest winning streak was 0 matches.

Player 3:
On 2022-03-30, player 3 won a match.
The longest winning streak was 1 match.


** Idea
1.
1.0, Idea
* Method-1:
- LEAD ==> Lấy giá trị từ (static table) chứ không lấy ở mấy trường generated ra từ (current table)
Ex:
- Givent a table ==> apply LEAD function

=========== WRONG SOLUTION
with match_streak as(
Select *, 1 as longest_streak from Matches
),
streak_info as(
Select
    player_id,
    match_day,
    if(lead(result, 1) over(partition by match_day asc) = 'Win' and result = 'Win',
    lead(longest_streak, 1) over(partition by match_day asc) +1, 1) as longest_streak
from match_streak
),
output as(
Select
    max(longest_streak) as longest_streak
from streak_info group by player_id
)
Select * from output;
=========== WRONG SOLUTION

Ex:
1,1,1,0,0,1,1,1
1,2,3,0,0,1,2,3
==> Sum() over (partition by x order by y)
+ Nếu dùng cái này thôi nó sẽ bị cộng dồn vào.

- Map:
    + Win: 1
    + Lose: 0

========== WRONG SOLUTION
with matches_map as(
Select *, if(result= 'Win', 1, 0) as streak_count from Matches
),
output as(
Select
    player_id, sum(streak_count) over(partition by player_id order by match_day) as longest_streak
from matches_map
)
Select * from output;
========== WRONG SOLUTION

Ex:
1,1,1,0,0,1,1,1
partition by player_id order by match_day
1,2,3,4,5,6,7,8
partition by player_id, result order by match_day
1,2,3,(1,2),4,5,6
    + group: 0 (1,2,3)
    + group: 3 (1,2)
    + group: 2 (4,5,6)
==> Nếu break thì group sẽ tăng tiếp
1,2,3,(4,5),(6,7,8),(9),(10,11)
1,2,3,(1,2),(4,5,6),(1),(7,8)
    + group: 8 (1)
    + group: 3 (7,8)
    ==> Trùng bên trên WIN trùng với LOST
        + Lý do: chúng k liên quan tăng tự nhiên chồng chéo
    + Có thể trùng WIN vs WIN không?
        + id1 --> Tăng nhanh hơn id2
        ==> Không thể trùng được (group nó chỉ tăng thôi)


* GROUP idea:
- Nếu lấy hiệu 2 cái ==> Ta sẽ suy được ra group thể hiện qua:
    + Độ chênh lệch giữa 2 id
    + group (always increase), if we have (more break)

with match_group as(
Select
    *,
    (row_number() over (partition by player_id order by match_day) - row_number() over (partition by player_id, result order by match_day)) as streak_group,
    if(result='Win', 1, 0) as is_win
from Matches
),
match_streak as(
Select
    *, sum(is_win) over(partition by player_id, streak_group order by match_day) as streak_length
from match_group
),
output as(
Select
    player_id, max(streak_length) as longest_streak
from match_streak group by player_id
)
Select * from output;

* Issue when coding:
- over order
- over(partition by player_id, streak_group order by match_day) as streak_length
    + Thiếu streak_group
- max(streak_length) as longest_streak
    + Không phải sum(streak_length)

* Brainstorm

1.1, Optimization
* Solution-2:

WITH cte AS
(SELECT *,
    ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY match_day) ck1,
    ROW_NUMBER() OVER (PARTITION BY player_id, result ORDER BY match_day) ck2
FROM Matches)

SELECT m.player_id, IFNULL(MAX(streak), 0) longest_streak
FROM
(SELECT DISTINCT player_id FROM Matches) m
LEFT JOIN
(SELECT player_id,
    COUNT(match_day) streak
FROM cte
WHERE result = 'Win'
GROUP BY 1, ck1-ck2) t
ON m.player_id = t.player_id
GROUP BY 1

1.2, Special cases

1.3, Complexity