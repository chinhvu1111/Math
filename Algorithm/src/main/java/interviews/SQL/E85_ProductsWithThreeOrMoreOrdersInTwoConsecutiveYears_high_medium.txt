
** Requirement:
- Write an SQL query to report the IDs of (all the products) that were ordered (three or more times) in (two consecutive years).
- (change Any --> ALL) product was ordered in (two consecutive years) --> Included
==> It is all not any
** Idea
1.
1.0, Idea
Example:

* Method-1:

order_id    |   product_id  |   purchase_date
1                   2           2020-03-16 : three times ==> Tư duy SUM (Sai)
1                   2           2020-04-20 : three times
2                   2           2021-04-20 : three times
1                   3           2020-03-16 : two times
1                   3           2021-07-23 : two times
1                   4           2021-07-23 : only one time


order_id    |   product_id  |   purchase_date   | count
1                   2           2020                2
2                   2           2021                1
1                   3           2020                1
1                   3           2021                1
1                   4           2021                1
+ LAG
order_id    |   product_id  |   purchase_date   | count |   lag
1                   2           2020                2       2
2                   2           2021                1       2 --> 1 + 2 >=3 --> OK
1                   3           2020                1       1 --> 1 + 1 ==2 --> NOT OK
1                   3           2021                1
1                   4           2021                1
- Distinct all product_id having count=1 --> Use (lead / lag) function easier
- Group by product_id, year --> count (all the number of product) per year
- Partition by product_id, any[ lag( year) ==2 ] ==> Get.

Quy luật:
- Lead : lấy row sau
- Lag : Lấy row trước

* Bài này hiểu nhầm đề bài 2 chỗ:
- Số lượng product từng year --> Sum quantity
==> Times : Số lần đặt --> Count (Đây là yêu cầu đề bài)

- Và đang lấy product_id mà số được đặt đỡn >=3 đơn trên từng year + 2 years liên tiếp
--> Ở đây mình đang sum >=3 là sai
- Là any / all --> Theo ở đây là (any) --> cả 2 năm đều >=3.

with cte2 as(
Select
    product_id,
    year(purchase_date) as purchase_year,
    count(1) as num_product
from Orders
group by product_id, year(purchase_date)
),
cte3 as(
Select
    product_id,
    purchase_year,
    num_product,
    lag(purchase_year, 1, 0) over (partition by product_id order by purchase_year desc) as following_purchase_date,
    lag(num_product, 1, 0) over (partition by product_id order by purchase_year desc) as following_num_product
from cte2
),
cte4 as(
Select distinct product_id from cte3
where (following_purchase_date - purchase_year=1 and num_product>=3 and following_num_product>=3)
)
Select * from cte4;

* Method-2:

Example:
order_id    |   product_id  |   purchase_date
1                   2           2020-03-16 : three times
1                   2           2020-04-20 : three times
1                   2           2020-03-16 : three times
1                   2           2021-05-20 : three times
2                   2           2021-06-20 : three times
2                   2           2021-08-20 : three times
1                   3           2020-03-16 : only one time
1                   3           2021-07-23 : only one time
1                   4           2021-07-23 : only one time

-->
order_id    |   product_id  |   purchase_date   |   year   |   next_year
1                   2           2020-03-16          2020        2020
1                   2           2020-04-20          2020        2020
1                   2           2020-03-16          2020        2021
1                   2           2021-05-20          2021        2021
2                   2           2021-06-20          2021        2021
2                   2           2021-08-20          2021        null
1                   3           2020-03-16          2020        2021
1                   3           2021-07-23          2021        null
1                   4           2021-07-23          2021        null

- Tư duy ở đây là tính count tất cả product_id trên các year --> Sau đó mới check year xem là liệu 2 product thoả mãn >=3
==> year có liên tiếp nhau được không <=> d.next_year=d.curr_year+1
* Tư duy dạng:
- Filter từng kết quả trước --> Để việc filter year cuối cùng <==> Không nên cố làm nhiều thứ cùng 1 lúc (where)

with cte2 as(
Select
    product_id,
    year(purchase_date) as purchase_year,
    count(1) as num_product
from Orders
group by product_id, year(purchase_date) having count(1) >=3
),
cte3 as(
Select
    product_id,
    purchase_year,
    lag(purchase_year, 1, 0) over (partition by product_id order by purchase_year desc) as next_year
from cte2
),
cte4 as(
Select
    distinct product_id
from cte3 where next_year-purchase_year=1
)
Select * from cte4;

==> Making shorter:

SELECT DISTINCT d.product_id FROM
(SELECT product_id,
 YEAR(purchase_date) AS curr_year,
 LEAD(YEAR(purchase_date)) OVER(PARTITION BY product_id ORDER BY YEAR(purchase_date)) AS next_year
 FROM orders
 GROUP BY curr_year, product_id
 HAVING COUNT(order_id) >= 3) d
 WHERE d.next_year=d.curr_year+1

#Reference:
2298. Tasks Count in the Weekend
2686. Immediate Food Delivery III
627. Swap Salary
1821. Find Customers With Positive Revenue this Year