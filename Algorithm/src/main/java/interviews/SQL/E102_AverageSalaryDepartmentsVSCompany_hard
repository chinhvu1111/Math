** Requirement:
Table: Salary

+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| employee_id | int  |
| amount      | int  |
| pay_date    | date |
+-------------+------+
In SQL, id is the primary key column for this table.
Each row of this table indicates (the salary of an employee) in (one month).
employee_id is a foreign key (reference column) from the Employee table.


Table: Employee

+---------------+------+
| Column Name   | Type |
+---------------+------+
| employee_id   | int  |
| department_id | int  |
+---------------+------+
In SQL, employee_id is the primary key column for this table.
Each row of this table indicates (the department of an employee).

Find the comparison result (higher/lower/same) of the average salary of employees in a department to the company's average salary.
* Return the result table in any order.

The result format is in the following example.



Example 1:

Input:
Salary table:
+----+-------------+--------+------------+
| id | employee_id | amount | pay_date   |
+----+-------------+--------+------------+
| 1  | 1           | 9000   | 2017/03/31 |
| 2  | 2           | 6000   | 2017/03/31 |
| 3  | 3           | 10000  | 2017/03/31 |
| 4  | 1           | 7000   | 2017/02/28 |
| 5  | 2           | 6000   | 2017/02/28 |
| 6  | 3           | 8000   | 2017/02/28 |
+----+-------------+--------+------------+
Employee table:
+-------------+---------------+
| employee_id | department_id |
+-------------+---------------+
| 1           | 1             |
| 2           | 2             |
| 3           | 2             |
+-------------+---------------+
Output:
+-----------+---------------+------------+
| pay_month | department_id | comparison |
+-----------+---------------+------------+
| 2017-02   | 1             | same       |
| 2017-03   | 1             | higher     |
| 2017-02   | 2             | same       |
| 2017-03   | 2             | lower      |
+-----------+---------------+------------+
Explanation:
In March, the company's average salary is (9000+6000+10000)/3 = 8333.33...
The average salary for department '1' is 9000, which is the salary of employee_id '1' since there is only one employee in this department. So the comparison result is 'higher' since 9000 > 8333.33 obviously.
The average salary of department '2' is (6000 + 10000)/2 = 8000, which is the average of employee_id '2' and '3'. So the comparison result is 'lower' since 8000 < 8333.33.

With he same formula for the average salary comparison in February, the result is 'same' since both the department '1' and '2' have the same average salary with the company, which is 7000.

** Idea
1.
1.0, Idea
* Method-1:

Output:
+-----------+---------------+------------+
| pay_month | department_id | comparison |
+-----------+---------------+------------+
| 2017-02   | 1             | same       |
| 2017-03   | 1             | higher     |
| 2017-02   | 2             | same       |
| 2017-03   | 2             | lower      |
+-----------+---------------+------------+

- pay_month:
    + Extract year-month from pay_date
    ==> sum(amount)

- first view:
    + total amount per year-month
- second view:
    + group by year-month, department_id
- output view:
    + join by department_id

* note:
- amount/ count(1)[number of employee]

with department_info as(
select
    s.*, e.department_id, REPLACE(substring(pay_date, 1,7), '/', '-') as pay_month
from Salary s join Employee e on s.employee_id = e.employee_id
),
avg_amount_department as(
Select
    sum(amount) / count(1) as avg_amount, pay_month
from department_info group by pay_month
),
avg_amount_department_month as(
Select
    pay_month, department_id, sum(amount)/ count(1) as amount_per_department
from department_info group by department_id, pay_month
),
comparison_view as (
    Select
        a.pay_month, a.department_id,
        if(a.amount_per_department > ap.avg_amount, 'higher', if(a.amount_per_department < ap.avg_amount, 'lower', 'same')) as comparison
    from avg_amount_department_month a join avg_amount_department ap
    on a.pay_month = ap.pay_month
)
Select * from comparison_view

====================================
#Reference:
SELECT
  department_salary.pay_month,
  department_id,
  CASE
    WHEN department_avg > company_avg THEN 'higher'
    WHEN department_avg < company_avg THEN 'lower'
    ELSE 'same'
  END AS comparison
FROM
  (
    SELECT
      department_id,
      AVG(amount) AS department_avg,
      DATE_FORMAT(pay_date, '%Y-%m') AS pay_month
    FROM
      salary
      JOIN employee ON salary.employee_id = employee.employee_id
    GROUP BY
      department_id,
      pay_month
  ) AS department_salary
  JOIN (
    SELECT
      AVG(amount) AS company_avg,
      DATE_FORMAT(pay_date, '%Y-%m') AS pay_month
    FROM
      salary
    GROUP BY
      DATE_FORMAT(pay_date, '%Y-%m')
  ) AS company_salary ON department_salary.pay_month = company_salary.pay_month;